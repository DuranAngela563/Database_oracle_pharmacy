--   QUERIES

-- Q1:
Select Pharmacy_Code, avg(Quantity) from Stock group by Pharmacy_Code
-- We compute the average of all units of medicines per pharmacy


-- Q2:
Select E.Pharmacy_Code, E.EName, E.Lastname, E.Ssn, 
(Select count(E2.SSN)
from Employee E2, Shift S2
where E.Pharmacy_Code = E2.Pharmacy_Code and E2.Shift_Code = S2.Code and S2.SName = 'Morning'
group by E2.Pharmacy_Code) as "Morning Employees"
from Employee E, Shift S
where E.Shift_Code = S.Code and S.SName = 'Morning';
-- For this task we did a complex query where in the SELECT argument we add a second query
-- for counting the number of morning employees, and then, relate it by pharmacy code with
-- the other columns we want from the outer query (E.Pharmacy_Code, E.EName, E.Lastname, E.Ssn)

-- Q3:
Select Pharmacy_Code, Medicine_Code,Distributor_CIF,Order_Date, Quantity 
from Med_Order where Pharmacy_Code = 100 order by Order_Date;
-- The purchase identifier is composed by its primary key (the 4 attributes)
-- We're doing the query to the pharmacy with Code = 100

-- Q4:
Select Pharmacy_Code, Count(*) as Orders_May_June from Med_Order where Order_Date
between to_date('01/05/2022', 'dd/mm/yyyy') and to_date('30/06/2022', 'dd/mm/yyyy')
group by Pharmacy_Code;
-- We use the to_date function which converts a string to a date to specify between
-- which dates orders have to be taken




--   TRIGGERS 


-- T1:
Create sequence seq_type_administration;

Create trigger tg_Tadmin_before_insert
before insert on Type_Administration
for each row
begin
select seq_type_administration.NEXTVAL INTO :NEW.Code from dual;
end;


--For this trigger we create a SEQUENCE which is used to automatically generate primary key values.After that, in order to
--access its values we use NEXTVAL pseudocolumn, which increments the sequence and returns the new value. 
-- DUAL is used in oracle when we want to query something that is not from a table. (It is a table that is automatically created by Oracle)

-- Bellow, we have written 2 insertion suggestions to check that the trigger works ok.
-- Insert into type_administration (TAName) values ('Intravenous');
-- Insert into type_administration (TAName) values ('Orally');



-- T2:

Create sequence seq_med;

Create trigger tg_med_before_insert
before insert on Medicine
for each row
begin
select seq_med.NEXTVAL into :NEW.Code from dual;
end;

-- For this trigger we have followed the same procedure that for the previous one
-- Insert into Medicine (Lab_Name, Commercial_brand, Type_Excipient, Unit_Version, Type_Admin_Code) values ('Lab Fran', 'Fluomocil', 340, 20, 280);



-- T3:
create or replace trigger TG_ADD_ORDER
after insert or update
on Stock
for each row
declare First_Employee VARCHAR2(9);
begin
    select Ssn into First_Employee from Employee  
    where Pharmacy_Code = :NEW.Pharmacy_Code
    fetch first 1 rows only;
    if :NEW.Quantity < 3
    then insert into Med_Order values
    (:NEW.Pharmacy_Code, :NEW.Medicine_Code, '12345678L', trunc(sysdate), 20, NULL, First_Employee);
    end if;
end;

-- Inside the trigger we do 2 things

-- 1ยบ 	We declare a variable First_Employee where we're going to save the Ssn of the 1ยบ employee
-- who belongs to the pharmacy for which the order is being made for. 
--We're assuming that it is the 1ยบ employee as we don't know who is going to inser/update the stock of the pharmacy. 
-- For that, we use the LIMIT clause that allows you to retrieve a portion of rows generated by a query.
--The FETCH clause specifies the number of rows to return. 

-- 2ยบ		Checks if the amount is less thant 3 ( with an IF clause). If it is True, it inserts an order in Med_order
-- with the values of the respective pharmacy, and medicine; we assume the distributor_CIF = '12345678L', 
--the function SYSDATE returns the current date, and with TRUNC it takes the date without the time.
-- We assume Quantity = 20, Delivery_Date = Null as we don't know when is going to arrive yet;

-- Bellow, we have written an insertion and update suggestion to check that the trigger works ok.
-- Insert into Stock values (500, 102, 3002, 2);
--Update Stock set Quantity = 1 where Code = 125;