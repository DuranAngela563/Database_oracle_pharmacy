3. Specify the following queries in SQL

3.1. Query1: Obtain the average number of medications per pharmacy.

SELECT AVG(Quantity),( Pharmacy_Code?) FROM Stock GROUP BY Pharmacy_Code  # avg of total units of all medicines per pharmacy

SELECT AVG(COUNT(DISTINC Medicine_Code)) FROM Stock GROUP BY Pharmacy_Code # avg of type of medicines per pharmacy



3.2. Query2: Get the number of employees per pharmacy for those who work in the pharmacy in the day shift. 
The query must return the identifier of the pharmacy, 
how many employees do you have assigned and the name, last name and Ssn of the employees.

SELECT E.Pharmacy_Code, COUNT(*), E.Name, E.LastName, E.Ssn 
FROM Employee E, Shift S
WHERE E.Shift_Code = S.Code AND S.Name = 'Morning' # ??
GROUP BY E.Pharmacy_Code



3.3. Query3: List the number of purchase orders from a pharmacy and order them by purchase order date. 
The query must return the purchase order identifier, the medication and the number of units requested.

# the pharmacy is given by their code
SELECT Pharmacy_Code, Medicine_Code, Distributor_CIF, Order_Date, Quantity
FROM Order WHERE Pharmacy_Code = code
ORDER BY Order_Date

# the pharmacy is given by their name 'pharmacy'
SELECT Pharmacy_Code, Medicine_Code, Distributor_CIF, Order_Date, Quantity
FROM Order, Pharmacy
WHERE Pharmacy_Code = Code AND Pharmacy.Name = 'pharmacy'
ORDER BY Order_Date


3.4. Query4: Obtain the number of purchase orders made per pharmacy between May and June 2022.
SELECT COUNT(*)
FROM Order
WHERE Order_Date BETWEEN 01/05/2022 AND 30/06/2022
GROUP BY Pharmacy_Code



4. Specify the following trigger in SQL
4.1. Create a sequence to increase the id code in the TYPE_ADMINISTRATION table.
CREATE SEQUENCE seq_type_administration;
CREATE TRIGGER tg_Tadmin_before_insert
BEFORE INSERT ON Type_Administration
FOR EACH ROW
BEGIN
SELECT seq_type_administration.NEXTVAL INTO :NEW.Code
END;



4.2. Create a sequence to increase the id code in the MEDICINE table.
CREATE SEQUENCE seq_med;
CREATE TRIGGER tg_med_before_insert
BEFORE INSERT ON Medicine
FOR EACH ROW
BEGIN
SELECT seq_med.NEXTVAL INTO :NEW.Code
END;

4.3. Trigger: Create a trigger when there are less than 3 units left in the stock insert a new order for the medicine to one distributor in table ORDER.
CREATE TRIGGER tg_stock_after_update
AFTER UPDATE ON Stock
FOR EACH ROW
WHEN (NEW.Quantity IS NOT NULL)
BEGIN
IF :NEW.Quantity < 3
INSERT INTO Order(Pharmacy_Code, Medicine_Code) values(Pharmacy_Code, Medicine_Code)
END;

